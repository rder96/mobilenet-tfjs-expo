"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const tf = __importStar(require("@tensorflow/tfjs-core"));
// tslint:disable-next-line: no-imports-from-dist
const jasmine_util_1 = require("@tensorflow/tfjs-core/dist/jasmine_util");
const platform_react_native_1 = require("./platform_react_native");
const test_env_registry_1 = require("./test_env_registry");
jasmine_util_1.describeWithFlags('PlatformReactNative', test_env_registry_1.RN_ENVS, () => {
    it('tf.util.fetch calls platform.fetch', async () => {
        const platform = new platform_react_native_1.PlatformReactNative();
        tf.setPlatform('rn-test-platform', platform);
        spyOn(platform, 'fetch');
        await tf.util.fetch('test/url', { method: 'GET' });
        expect(platform.fetch).toHaveBeenCalledWith('test/url', { method: 'GET' });
    });
});
//# sourceMappingURL=platform_react_native_test.js.map